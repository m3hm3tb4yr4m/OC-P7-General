import streamlit as st
import streamlit.components.v1 as components
import requests
from PIL import Image
import plotly.express as px
import plotly.graph_objects as go
import plotly.figure_factory as ff
import matplotlib.pyplot as plt
import pandas as pd
import joblib
import shap
from fastapi.encoders import jsonable_encoder
import plotly.graph_objects as go
import pickle

icon = Image.open("images/favicon.ico")
image = Image.open("images/pret-a-depenser.png")
image_oc=Image.open("images/Logo_OpenClassrooms.png")
########################################################
# General settings
########################################################
st.set_page_config(
    page_title="Prêt à dépenser - Default Risk",
    page_icon=icon,
    layout="wide",
    initial_sidebar_state="expanded",

)

st.title("Prêt à dépenser") 
st.header("Projet 7 - Implémentez un modèle de scoring")  
st.subheader("Openclassroom - Formation Data scientist") 

########################################################
# Session for the API
########################################################
def fetch(session, url):

    try:
        result = session.get(url)
        return result.json()
    except Exception:
        return {}

session = requests.Session()


########################################################
# Functions to call the EndPoints
########################################################
@st.cache
def client():
    # Getting clients Id
    #response = fetch(session, f"http://fastapi:8008/api/clients")
    response = requests.get("http://127.0.0.1:8000/api/clients").json()
    if response:
        return response["clientsId"]
    else:
        return "Error"

def client_details(id):
    # Getting client's details
    response = fetch(session, f"http://127.0.0.1:8000/api/clients/{id}")
    if response:
        return response
    else:
        return "Error"

def client_prediction(id):
    # Getting client's prediction
    response = fetch(session, f"http://127.0.0.1:8000/api/predictions/clients/{id}")
    if response:
        return response
    else:
        return "Error"

def clients_df(id):
    # Getting client's df based on id
    response = fetch(session, f"http://127.0.0.1:8000/api/predictions/clients/shap/{id}")
    if response:
        return response
    else:
        return "Error"



########################################################
# To show the SHAP image
########################################################
def st_shap(plot, height=None):
    shap_html = f"<head>{shap.getjs()}</head><body>{plot.html()}</body>"
    components.html(shap_html, height=height)

st.markdown("### 1. Client") 
st.markdown("## 1.1. Choix") 
client_id = st.selectbox("sélection : " , client()) 
st.markdown("## 1.2. Données")
df = pd.DataFrame(data=client_details(client_id))

st.dataframe(data=df.style.highlight_max(axis=0), width=None, height=None)
st.markdown("### 2. Prêt")

st.markdown("## 2.1. Accord")
prediction_client=client_prediction(client_id)
#st.write(prediction_client)
# client_prediction(client_id)
if prediction_client.get("repay")=="Yes":
    st.success("Le crédit du client " + str(int(client_id)) +" est accordé!")
if prediction_client.get("repay")=="No":
    st.error("Le crédit du client " + str(int(client_id)) +" n'est pas accordé!")


st.markdown("## 2.2. graphique")

# Add histogram data
x0 = prediction_client.get("probability0")*100
x1 = prediction_client.get("probability1")*100
xthreshold=prediction_client.get("threshold")*100

fig_gauge_chart = go.Figure(go.Indicator(
   domain = {'x': [0, 1], 'y': [0, 1]},
    value = x1,
    mode = "gauge+number",
    title = {'text': "Probability"},
    gauge = {
        'axis': {'range': [None, 100]},
        "bar": {"color": "white"},# LawnGreen
        "bgcolor": "white",
        "steps": 
        [{"range": [0, xthreshold], "color": "#27AE60"},#Green
        {"range": [xthreshold, 100], "color": "#E74C3C"}#red
        ]}))
st.plotly_chart(fig_gauge_chart, use_container_width=False, sharing="streamlit") 
st.write(prediction_client)


st.markdown("## 2.3. SHAP")
# Loading data
# Loading the model


# if "explainer" not in st.session_state:
#     #st.session_state["explainer"] = joblib.load("./Data/explainer_reduced_X_test.pkl")
#     explainer_file = "./Data/explainer_reduced_X_test.pkl"
#     #with open(explainer_file, 'rb') as fo:
#     #    st.session_state["explainer"] = joblib.load(fo)
#     st.session_state["explainer"] = pickle.load(open(explainer_file, 'rb'))
# if "shap_values" not in st.session_state:
#     #st.session_state["shap_values"] = joblib.load("/Data/shap_values_reduced_X_test.pkl")
#     shap_values_file = "./Data/shap_values_reduced_X_test.pkl"
#     #with open(shap_values_file, 'rb') as fo:
#     #    st.session_state["shap_values"] = joblib.load(fo)
#     st.session_state["shap_values"] = pickle.load(open(shap_values_file, 'rb'))
# Loading data
# data_df = clients_df(client_id)
# data_df = pd.read_json(data_df)

# visualize the first prediction's explanation (use matplotlib=True to avoid Javascript)
#st_shap(shap.force_plot(st.session_state["explainer"].expected_value[1], st.session_state["shap_values"][1][data["shapPosition"],:],  data_df.iloc[0,:]))

# st_shap(shap.plots.waterfall(st.session_state["shap_values"][0]), height=300)
# st_shap(shap.plots.beeswarm(st.session_state["shap_values"]), height=300)
#
# st_shap(shap.force_plot(st.session_state["explainer"].expected_value, st.session_state["shap_values"][0,:], data_df.iloc[0,:]), height=200, width=1000)
# st_shap(shap.force_plot(st.session_state["explainer"].expected_value, st.session_state["shap_values"][:1000,:], data_df.iloc[:1000,:]), height=400, width=1000)

def necessary_datas(model, df):
  df_y_pred = model.predict(df)
  df_explainer = shap.TreeExplainer(model)
  df_shap_values = df_explainer.shap_values(df)
  return df_y_pred, df_explainer, df_shap_values
y_pred, explainer, shap_values=necessary_datas(loaded_model, data_df)